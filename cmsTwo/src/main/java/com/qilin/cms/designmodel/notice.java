package com.qilin.cms.designmodel;

/**
 * Created by gaohaiqing on 16-9-8.
 */
public class notice {
    /**
     * 研究设计模式这块，千万不能研究死，要灵活使用，研究精髓。
     * 如果研究死了，还不如不看
     *
     * spring的IOC原理，实际用到了工厂模式。
     * 高内聚低耦合 是软件设计的终极目标，包含了代码更容易复用；更好的灵活性，能对需求变化作出快速响应 等等，
     * spring充当了中间人的角色，角色之间通过spring打交道，彼此之间甚至都不知道对方的存在，耦合性大大降低
     *
     * spring的AOP原理的织入部分，用到了动态代理模式，
     *
     * 解释：为什么要有切面
     * 面向切面编程（Aspect Oriented Programming，AOP）其实就是一种关注点分离的技术。
     * 我们软件开发时经常提一个词叫做“业务逻辑”或者“业务功能”，我们的代码主要就是实现某种特定的业务逻辑。但是我们往往不能专注于业务逻辑，
     * 比如我们写业务逻辑代码的同时，还要写事务管理、缓存、日志等等通用化的功能，而且每个业务功能都要和这些业务功能混在一起，痛苦！
     * 所以，为了将业务功能的关注点和通用化功能的关注点分离开来，就出现了AOP技术。这些通用化功能的代码实现，对应的就是我们说的切面（Aspect）。
     *
     * 通过上面的解释，我们知道每一个切面都用来解决一块通用功能，最后完整的业务逻辑还是需要事物、日志、缓存等等，所以这些切面还需要合并到一起，
     * 专业术语叫织入。织入有三种方式： 1.编译时织入 2.类加载时织入 3.运行时织入。spring使用第三种
     *
     * 博客：https://course.tianmaying.com/web-development+spring-aop#0
     */
}
