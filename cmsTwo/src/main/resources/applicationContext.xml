<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/websocket
        http://www.springframework.org/schema/websocket/spring-websocket.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd">



    <context:component-scan base-package="com.qilin.cms"></context:component-scan>


    <bean id="websocket" class="com.qilin.cms.controller.WebsocketEndPoint"/>

    <websocket:handlers>
        <websocket:mapping path="/websocket" handler="websocket"/>
        <websocket:handshake-interceptors>
            <bean class="com.qilin.cms.controller.HandshakeInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers>

       <context:property-placeholder location="classpath:jdbc.properties"/>
       <!-- 数据源 apache dbcp -->
       <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
              <property name="driverClassName" value="${jdbc.driver}"/>
              <property name="url" value="${jdbc.url}"/>
              <property name="username" value="${jdbc.username}"/>
              <property name="password" value="${jdbc.password}"/>

              <property name="initialSize" value="${jdbc.initialSize}"/>

              <property name="maxActive" value="${jdbc.maxActive}"/>
              <!-- 连接池最大空闲 -->
              <property name="maxIdle" value="${jdbc.maxIdle}"/>
              <!-- 连接池最小空闲 -->
              <property name="minIdle" value="${jdbc.minIdle}"/>
              <property name="maxWait" value="${jdbc.maxWait}"/>
       </bean>

       <!--
           2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源

           MyBatis定义数据源,同意加载配置
           这里的自动扫描不大好使 nested exception is org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)
       -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" ref="dataSource"></property>
              <property name="configLocation" value="classpath:mybaties.xml" />
              <!--<property name="mapperLocations" value="classpath:com/qilin/cms/baseCrudRepository/*.xml"></property>-->
       </bean>

        <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
            <constructor-arg index="0" ref="sqlSessionFactory"/>
        </bean>
    <!--
        3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory

        basePackage:指定sql映射文件/接口所在的包（自动扫描）
    -->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <property name="basePackage" value="com.qilin.cms.dao"></property>
              <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
       </bean>

       <!--
           4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源
       -->
       <bean id="txManager"
             class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource"></property>
       </bean>

    <!-- 初始化 springHolder 工具类 -->
    <bean class="com.qilin.cms.util.ApplicationContextHolder"
          lazy-init="false" autowire="byType"/>
       <!-- 5. 使用声明式事务
            transaction-manager：引用上面定义的事务管理器
        -->
       <!--<tx:annotation-driven transaction-manager="txManager" />-->

    <task:annotation-driven/>

</beans>